When having ComputerCraft installed along with PneumaticCraft, you'll be able to interact with almost every PneumaticCraft machine, and Drones. Any of the following mentioned machines can be interacted with as ComputerCraft peripherals. In Lua, you can type "m = peripheral.wrap(<side>)", with <side> being the side of the computer the peripheral is connected to (top, bottom, left, right, back, front). After this, you can use any of the mentioned functions by doing "m.<functionName>".
Anywhere in the following functions where a '<side>' appears as one of the arguments, 'up', 'down', 'north', 'south', 'east', 'west' are valid arguments.
If there are still some functions you'd like to have exposed after reading this, don't hesitate to put up a suggestion.

[prefix{l}]Every machine running on compressed air[prefix{}]
You can get the following info from any PneumaticCraft block that runs on compressed air (including the Air Compressor, Pressure Tube):
• getPressure(), getPressure(<side>) - Will get the pressure in the block. The side parameter is an optional parameter, and is currently only useful when getting the pressure from a Vacuum Pump, as it contains two different pressures.
• getDangerPressure() - This is a constant, it'll be 5 bar for tier one machines, and 20 for tier two.
• getCriticalPressure() - This is a constant, it'll be 7 bar for tier one machines, and 25 for tier two.

[prefix{l}]Every machine that is heat-related[prefix{}]
This is for blocks like the Heat Sink, or Compressed Iron Block, that have a temperature.
• getTemperature(), getTemperature(<side>) - Gets the temperature from the block.

[link{pneumaticcraft:block/air_cannon}]Air Cannon[link{}]
Apart from the methods that apply to any pneumatic machine, you can also use the following functions on Air Cannons:
• setExternalControl(<true/false>) - When parsed true, this will disable the Cannon to be rotated with normal methods (GPS Tool insertion, change in range upgrades..)
• setTargetLocation(<x>,<y>,<z>) - Makes the Air Cannon target the given location. This normally would be the location stored in a GPS Tool.
• setRotationAngle(<angle>) - Makes the Air Cannon rotate its vertical axis to the angle specified.
• setHeightAngle(<angle>) - Makes the Air Cannon rotate the height angle to the angle specified.
• isDoneRotating() - Returns true when the cannon is done turning.
• getMinWorkingPressure() - Returns the minimal pressure needed to fire the cannon (the yellow to green threshold in the GUI).
• fire() - Will fire the Air Cannon, provided that there's enough pressure to do so, and when there are items inserted. Returns true if successful.

[link{pneumaticcraft:menu/elevator}]Elevator (Base)[link{}]
Apart from the methods that apply to any pneumatic machine, you can also use the following functions when connected to any Elevator Base:
• setExternalControl(<true/false>) - When parsed true, this will set the Elevator's 'redstone mode' to 'Elevator Caller' mode, which is also applicable for ComputerCraft control. You don't have to set it prior to calling setTargetHeight though: The mode will be changed to external control automatically.
• getMinWorkingPressure() - Returns the minimal pressure needed to extend the Elevator (the yellow to green threshold in the GUI). Making the Elevator go down is free.
• setTargetHeight(<height>) - Sets the Elevator's target height to the height parsed (in meters/blocks, floating point).
• getTargetHeight() - Gets the Elevator's target height (in meters/blocks, floating point).
• getCurrentHeight() - Gets the Elevator's current height (in meters/blocks, floating point).

[link{pneumaticcraft:block/universal_sensor}]Universal Sensor[link{}]
Apart from the methods that apply to any pneumatic machine, you can also use the following functions when connected to any Universal Sensor:
• getSensorNames() - Will return a table of all sensor names.
• setSensor(<sensorName>), setSensor(<index>), setSensor() - Will set the current selected sensor the the sensor provided. The sensor name should be one of the names returned by getSensorNames(). The index should be an index on the returned table from getSensorNames(), so if you want to select the second sensor, do setSensor(2). This function will return true if the sensor is possible with the currently inserted upgrades. When using setSensor(), the Universal Sensor will select no sensor (therefore using no air).
• getSensor() - Returns the name of the current selected sensor.
• setTextField(<text>) - Some sensors use a text field to specify additional options (like the Entity in range accepts '@player' to select players only). You can specify the desired text in here.
• getTextField() - Returns the current text field stored in the Universal Sensor
• isSensorEventBased() - There are two categories of sensors: Event based, and polling sensors. Event based sensors wait for an occurence to happen (player attacks, item pickups). Polling sensors check the state of the sensor once in a while (entities in range, world time, rain sensor). This function returns true if the current selected sensor is event based.
• getSensorValue() - When the current sensor is a poll sensor, this will return the (non-inverted) redstone signal it would output. This is equal to getting the redstone signal using ComputerCraft. Keep in mind that setting the sensor and immediately getting the output is not reliable, as many polling sensors are polling lazily to improve performance. The advantage of using getSensorValue() is that a pull-event will be triggered. When there's no polling sensor selected an exception will be thrown.
• getMinWorkingPressure() - Returns the minimal pressure needed to make the Universal Sensor work (the yellow to green threshold in the GUI).
• setGPSToolCoordinate(<slotIndex>,<x>,<y>,<z>) Sets the location stored in the GPS Tool located in the given slot (starting with 1) to the provided location. This is useful for sensors that use a location.
For event based sensors (like the player right click sensor), getting the sensor value is event based. You get the event by doing a <arguments> = os.pullEvent("universalSensor"). Usually the arguments consist of <eventName, redstoneStrength>. The player right click sensor is an exception, as <eventName, redstoneStrength, interactedX, interactedY, interactedZ> is returned. This allows for some interesting uses..

[link{pneumaticcraft:block/plastic_mixer}]Plastic Mixer[link{}]
Apart from the getTemperature(), you can also call:
• selectColor(<colorIndex>), Will set the currently selected plastic to be crafted to the index given, ranging from 1-16. When calling selectColor(0) it will unselect any selections.

[link{pneumaticcraft:block/drone_interface}]Drone Interface[link{}]
Click on the link to visit the Drone Interface page or ComputerCraft info.
